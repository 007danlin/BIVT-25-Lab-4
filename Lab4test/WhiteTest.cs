namespace Lab4test
{
    [TestClass]
    public sealed class WhiteTest
    {
        Lab4.White _main = new Lab4.White();
        const double E = 0.0001;

        [TestMethod]
        public void Test01()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new double[] {
                20.928450,
                20.928450,
                21.702534,
                21.702534,
                20.928450,
                0.000000,
                1.732051,
                5.099020,
                5.099020,
                5.099020,
                95.739229,
                7.874008,
                7.874008,
                35.580894,
                5
                };
            var test = new double[answer.Length];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task1(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i], test[i], E, $"Test {i} failed");
            }
        }
        [TestMethod]
        public void Test02()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var inputP = new int[] { 1, 1, 3, 4, 5,  6,  7, -8, 1, 10, -5, -3, -1, 1, 0 };
            var inputQ = new int[] { 2, 3, 5, 8, 3, 13, 11, 10, 9, 20,  7,  8,  8, 1, 0 };
            var answer = new int[] { 0, 4, 2, 0, 0,  0,  0,  4, 4,  0,  6, 13,  7, 0, 0 };
            var test = new int[answer.Length];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task2(input[i], inputP[i], inputQ[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i], test[i], $"Test {i} failed");
            }
        }
        [TestMethod]
        public void Test03()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, -8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, 8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 0, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 8, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 1, 5, 3, 8, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -8, -1, -1, -2, -3, -3, -1, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, -8, -1, -2, -3, -3, 0, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -3, -2, -2 },
              new int[] {  2, 3, 3, 2 },
              new int[] {  -3, -2, 3, 2 },
              new int[] {  -2, -33, 5, 3, 1, 1, 15, -8, 2, 88 },
              new int[] {  1, 2, 1, 3, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, -3, 1, 1, -1, -2, 3, 3, 3 },
              new int[] {  0, 8, -15, 15, 15, 15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                _main.Task3(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for(int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test04()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
              new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 16, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 16, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 16, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] { -2, -1, 2, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] { -2, -1, 2, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] { 0, 0, 0, 0, 0 },
              new int[] { 0, 1, 1 },
              new int[] { 0, -2, -3, -2 },
              new int[] { 0, 2, 3, 2 },
              new int[] { 0, -2, -3, 2 },
              new int[] { -2, 88, 5, 3, 1, 1, 6, -8, 2, -33 },
              new int[] { 1, 2, 2, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 12 },
              new int[] { 0, 8, 2, 15, 15, -15, -15, -8, 2, -3 },
              new int[] { 0 }
            };
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                _main.Task4(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test05()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var inputP = new int[] { 1, 2, 3, 4, 5, 0, -2, -2, -2, 5, -5, 3, -1, 15, 0 };
            var answer = new int[] { 3, 0, 5, -1, -1, 0, -1, 1, -1, -1, -1, 2, 3, 2, -1 };
            var test = new int[answer.Length];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task5(input[i], inputP[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i], test[i], $"Test {i} failed");
            }
        }
        [TestMethod]
        public void Test06()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
              new int[] { -1, -2, 1, 0, 3, 2, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] { 1, 2, 1, 0, 3, 2, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] { 1, 2, 1, 1, 3, 2, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] { -1, -2, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] { 0, 0, 0, 0, 0 },
              new int[] { 1, 1, 1 },
              new int[] { -3, -2, -3, -2 },
              new int[] { 3, 2, 3, 2 },
              new int[] { 3, -2, -3, 2 },
              new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] { 2, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] { -2, 1, -1, -3, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] { 8, 0, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] { 5 }
            };
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                _main.Task6(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test07()
        {
            // Arrange
            var input = new int[][] {
              new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] { 0, 0, 0, 0, 0 },
              new int[] { 1, 1, 1 },
              new int[] { -3, -2, -3, -2 },
              new int[] { 3, 2, 3, 2 },
              new int[] { 3, -2, -3, 2 },
              new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] { 5 }
            };
            var answer = new int[][] {
              new int[] { 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 8, 8, 0, 0, 5, 2, 3 },
              new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] { },
              new int[] { 0, 0, 0 },
              new int[] { 0, 0, 0, 0, 0 },
              new int[] { 1, 1, 1 },
              new int[] { },
              new int[] { 3, 2, 3, 2 },
              new int[] { 3, 2 },
              new int[] { 88, 5, 3, 1, 1, 15, 2 },
              new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] { 1, 2, 3, 1, 1, 3, 3 },
              new int[] { 0, 8, 15, 15, 15, 2 },
              new int[] { 5 }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task7(input[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test08()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
              new int[] { 8, 8, 8, 5, 5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, -1, -1, -2, -5, -7, -8 },
              new int[] { 8, 8, 8, 8, 7, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0 },
              new int[] { 8, 8, 8, 8, 7, 5, 5, 5, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1 },
              new int[] { -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -3, -3, -3, -3, -4, -4, -5, -5, -5, -7, -8, -8, -8, -8 },
              new int[] { 0, 0, 0, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -3, -3, -3, -3, -5, -5, -5, -7, -8, -8, -8, -8 },
              new int[] { 0, 0, 0, 0, 0 },
              new int[] { 1, 1, 1 },
              new int[] { -2, -2, -3, -3 },
              new int[] { 3, 3, 2, 2 },
              new int[] { 3, 2, -2, -3 },
              new int[] { 88, 15, 5, 3, 2, 1, 1, -2, -8, -33 },
              new int[] { 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1 },
              new int[] { 3, 3, 3, 2, 1, 1, 1, -1, -1, -2, -2, -3, -3 },
              new int[] { 15, 15, 15, 8, 2, 0, -3, -8, -15, -15 },
              new int[] { 5 }
            };
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                _main.Task8(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test09()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
              new int[] { 3, 2, -8, -5, 5, 0, 0, -1, 8, 8, -7, 2, 1, 1, 1, 3, 5, 8, 3, 3, 2, 1, 0, -1, -2 },
              new int[] { 3, 2, 8, 5, 5, 0, 0, 1, 8, 8, 7, 2, 1, 1, 1, 3, 5, 8, 3, 3, 2, 1, 0, 1, 2 },
              new int[] { 3, 2, 8, 5, 5, 4, 4, 1, 8, 8, 7, 2, 1, 1, 1, 3, 5, 8, 3, 3, 2, 1, 1, 1, 2 },
              new int[] { -3, -2, -8, -5, -5, -4, -4, -1, -8, -8, -7, -2, -1, -1, -1, -3, -5, -8, -3, -3, -2, -1, -1, -1, -2 },
              new int[] { -3, -2, -8, -5, -5, 0, 0, -1, -8, -8, -7, -2, -1, -1, -1, -3, -5, -8, -3, -3, -2, -1, 0, -1, -2 },
              new int[] { 0, 0, 0, 0, 0 },
              new int[] { 1, 1, 1 },
              new int[] { -2, -3, -2, -3 },
              new int[] { 2, 3, 2, 3 },
              new int[] { 2, -3, -2, 3 },
              new int[] { -33, 2, -8, 15, 1, 1, 3, 5, 88, -2 },
              new int[] { 3, 3, 3, 2, 1, 1, 1, 3, 2, 1, 3, 2, 1 },
              new int[] { 3, 3, -3, -2, -1, 1, 1, 3, 2, -1, -3, -2, 1 },
              new int[] { -3, 2, -8, -15, -15, 15, 15, 15, 8, 0 },
              new int[] { 5 }
            };
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                _main.Task9(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test10()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
                new int[] { -2, 5, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 0, 1, 8, 0, 15, 1, 15, 2, 15, 3, -15, 3, -15, 8, -8, 5, 2, 3, -3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, -2, 1, -3, 1, -1, 2, 2, 3, 3, 3, 1, 8, 1, 5, -1, 3, -2, 1, -3, 1, 3, 1, 3, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, 1, -1, 2, -1, 3, -1, 1, -2, 2, -3, 3, -3, 1, -8, 1, -5, 1, -3, 2, -1, 3, -1, 3, -1, 3, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -2, -1, 88, 0, 5, -1, 3, -2, 1, -3, 1, -3, 15, -8, -8, -5, 2, -3, -33, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 3, 0, -2, 0, -3, 0, 2, 0 },
                new int[] { 1, 3, 1, 2, 1, 3, 2 },
                new int[] { -3, -3, -2, -2, -3, -3, -2, -2 },
                new int[] { 3, 1, 2, 1, 3, 1, 2 },
                new int[] { 3, 0, -2, 0, -3, 0, 2, 0, 0 },
                new int[] { -2, -2, 88, -1, 5, 0, 3, -1, 1, -2, 1, -3, 15, -3, -8, -8, 2, -5, -33, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 1, -2, 2, -1, 3, -1, 1, -1, 2, -2, 3, -3, 1, -3, 1, -8, 1, -5, 2, -3, 3, -1, 3, -1, 3, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { 1, 2, -2, 1, -3, 1, -1, 1, 2, 2, 3, 3, 1, 3, 1, 8, -1, 5, -2, 3, -3, 1, 3, 1, 3, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { 0, 2, 8, 1, 15, 0, 15, 1, 15, 2, -15, 3, -15, 3, -8, 8, 2, 5, -3, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 5, -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task10(input[i], input[input.Length-1-i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test11()
        {
            // Arrange
            var inputA = new double[] { 1, 2.5, 3, 0.01, 0.5,  1.6, 2.7, 8.8, 9.01,   10, -5, -0.3, -0.01, 0, 0 };
            var inputB = new double[] { 2, 3.5, 3,  0.8, 1.5, 3.33, 1.1, 1.1, -1.1, -1.2,  7,  0.8, -0.08, 1, 0 };
            var inputN = new int[] { 2, 3, 3, 8, 5, 3, 2, 2, 2, 2, 7, 8, 8, 1, 0 };
            var answer = new double[][] {
              new double[] { 1, 2 },
              new double[] { 2.5, 3, 3.5 },
              null,
              new double[] { 0.01, 0.12285714285714286, 0.23571428571428574, 0.3485714285714286, 0.46142857142857147, 0.5742857142857143, 0.6871428571428572, 0.8 },
              new double[] { 0.5, 0.75, 1, 1.25, 1.5 },
              new double[] { 1.6, 2.465, 3.33 },
              new double[] { 2.7, 1.1 },
              new double[] { 8.8, 1.1 },
              new double[] { 9.01, -1.1 },
              new double[] { 10, -1.2 },
              new double[] { -5, -3, -1, 1, 3, 5, 7 },
              new double[] { -0.3, -0.14285714285714282, 0.014285714285714346, 0.17142857142857154, 0.3285714285714287, 0.4857142857142858, 0.642857142857143, 0.8 },
              new double[] { -0.01, -0.02, -0.03, -0.04, -0.05, -0.060000000000000005, -0.06999999999999999, -0.08 },
              null,
              null
            };
            var test = new double[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task11(inputA[i], inputB[i], inputN[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(test[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test12()
        {
            // Arrange
            var input = new double[][] {
              new double[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new double[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new double[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new double[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new double[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new double[] {  0, 0, 0, 0, 0 },
              new double[] {  1, 1, 1 },
              new double[] {  -3, -2, -3, -2 },
              new double[] {  3, 2, 3, 2 },
              new double[] {  3, -2, -3, 2 },
              new double[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new double[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new double[] {  -1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new double[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -1 },
              new double[] {  5 }
            };
            var answer = new double[][] {
              new double[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, 4, 0, 0, 5, -5, -8, 2, 3 },
              new double[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new double[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new double[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -6, -4, -4, -5, -5, -8, -2, -3 },
              new double[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -4, 0, 0, -5, -5, -8, -2, -3 },
              new double[] { 0, 0, 0, 0, 0 },
              new double[] { 1, 1, 1 },
              new double[] { -3, -2, -3, -2 },
              new double[] { 3, 2, 3, 2 },
              new double[] { 3, -2, -3, 2 },
              new double[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new double[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new double[] { 0.5, -2, -3, -0.5, 2, 3, 1, 1, -0.5, -2, -3, 3, 3 },
              new double[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, 1 },
              null
            };
            var test = new double[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task12(input[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < answer.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(test[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
    }
}